{"version":3,"sources":["components/Statistics.js","components/FeedbackOptions.js","components/Section.js","components/Notification.js","components/Feedback.js","App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","defaultProps","positiveFeedback","FeedbackBtn","styled","button","FeedbackOptions","onLeaveFeedback","options","map","option","name","onClick","SectionTitle","p","Section","title","children","Notification","message","Feedback","state","handleChange","e","target","setState","countTotalFeedback","Object","values","reduce","acc","elem","countPositiveFeedbackPercentage","Math","round","this","statisticsSumm","isNaN","keys","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAGMA,EAAa,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,oCACE,mCAASJ,GACT,sCAAYC,GACZ,kCAAQC,GACR,oCAAUC,GACV,gDAAsBC,EAAtB,QAKSL,IAEfA,EAAWM,aAAe,CACxBL,KAAM,EACNC,QAAS,EACTC,IAAK,EACLC,MAAO,EACPG,iBAAkB,G,mRClBpB,IAAMC,EAAcC,IAAOC,OAAV,KA0BFC,EAhBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,gBAAiBC,EAAc,EAAdA,QAC1C,OACE,oCACGA,EAAQC,KAAI,SAACC,GAAD,OACX,kBAACP,EAAD,CAAaQ,KAAMD,EAAQE,QAASL,GACjCG,Q,gHCfX,IAAMG,EAAeT,IAAOU,EAAV,KAiBHC,EAZC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,kBAACJ,EAAD,KACE,4BAAKG,GADP,IACoBC,ICFTC,EAPM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,2BAAIA,ICEQC,E,4MACnBC,MAAQ,CACNzB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPwB,aAAe,SAACC,GAAO,IACbZ,EAASY,EAAEC,OAAXb,KACR,EAAKc,SAAL,eAAiBd,EAAO,EAAKU,MAAMV,GAAQ,K,EAG7Ce,mBAAqB,WACnB,OAAOC,OAAOC,OAAO,EAAKP,OAAOQ,QAAO,SAACC,EAAKC,GAAN,OAAeD,EAAMC,IAAM,I,EAGrEC,gCAAkC,WAChC,OAAOC,KAAKC,MACT,EAAKb,MAAMzB,KACV+B,OAAOC,OAAO,EAAKP,OAAOQ,QAAO,SAACC,EAAKC,GAAN,OAAeD,EAAMC,IAAM,GAC5D,M,uDAII,IAAD,EACwBI,KAAKd,MAA5BzB,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBC,EAAQoC,KAAKT,qBACfxB,EAAmBiC,KAAKH,kCACxBI,EAAiBxC,EAAOC,EAAUC,EAKtC,OAJIuC,MAAMnC,KACRA,EAAmB,GAInB,oCACE,kBAAC,EAAD,CAASc,MAAK,yBACZ,kBAAC,EAAD,CACET,gBAAiB4B,KAAKb,aACtBd,QAASmB,OAAOW,KAAKH,KAAKd,UAI9B,kBAAC,EAAD,CAASL,MAAK,cACXoB,GAAkB,EACjB,kBAAC,EAAD,CACExC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBE,IAGtB,kBAAC,EAAD,CAAciB,QAAQ,4B,GApDIoB,aCHvB,SAASC,IACtB,OAAO,kBAAC,EAAD,MCCTC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACH,EAAD,OAEFI,SAASC,eAAe,W","file":"static/js/main.51d8a0f2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <>\r\n      <p>Good:{good}</p>\r\n      <p>Neutral:{neutral}</p>\r\n      <p>Bad:{bad}</p>\r\n      <p>Total:{total}</p>\r\n      <p>Positive feedback:{positivePercentage} %</p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Statistics;\r\n\r\nStatistics.defaultProps = {\r\n  good: 0,\r\n  neutral: 0,\r\n  bad: 0,\r\n  total: 0,\r\n  positiveFeedback: 0,\r\n};\r\n\r\nStatistics.propTypes = {\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FeedbackBtn = styled.button`\r\n  background-color: transparent;\r\n  width: 80px;\r\n  border: solid 1px #fff;\r\n  box-shadow: 0px 0px 7px 1px rgba(102, 121, 201, 1);\r\n  &:not(:last-child) {\r\n    margin-right: 14px;\r\n  }\r\n`;\r\n\r\nconst FeedbackOptions = ({ onLeaveFeedback, options }) => {\r\n  return (\r\n    <>\r\n      {options.map((option) => (\r\n        <FeedbackBtn name={option} onClick={onLeaveFeedback}>\r\n          {option}\r\n        </FeedbackBtn>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst SectionTitle = styled.p`\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n`;\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <SectionTitle>\r\n      <h2>{title}</h2> {children}\r\n    </SectionTitle>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Notification = ({ message }) => {\r\n  return <p>{message}</p>;\r\n};\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\nexport default Notification;\r\n","import React, { Component } from \"react\";\r\nimport Statistics from \"./Statistics\";\r\nimport FeedbackOptions from \"./FeedbackOptions\";\r\nimport Section from \"./Section\";\r\nimport Notification from \"./Notification\";\r\n\r\nexport default class Feedback extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    const { name } = e.target;\r\n    this.setState({ [name]: this.state[name] + 1 });\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    return Object.values(this.state).reduce((acc, elem) => acc + elem, 0);\r\n  };\r\n\r\n  countPositiveFeedbackPercentage = () => {\r\n    return Math.round(\r\n      (this.state.good /\r\n        Object.values(this.state).reduce((acc, elem) => acc + elem, 0)) *\r\n        100\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    const total = this.countTotalFeedback();\r\n    let positiveFeedback = this.countPositiveFeedbackPercentage();\r\n    let statisticsSumm = good + neutral + bad;\r\n    if (isNaN(positiveFeedback)) {\r\n      positiveFeedback = 0;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Section title={`Please leave feedback`}>\r\n          <FeedbackOptions\r\n            onLeaveFeedback={this.handleChange}\r\n            options={Object.keys(this.state)}\r\n          />\r\n        </Section>\r\n\r\n        <Section title={`Statistics`}>\r\n          {statisticsSumm >= 1 ? (\r\n            <Statistics\r\n              good={good}\r\n              neutral={neutral}\r\n              bad={bad}\r\n              total={total}\r\n              positivePercentage={positiveFeedback}\r\n            />\r\n          ) : (\r\n            <Notification message=\"No feedback given\" />\r\n          )}\r\n        </Section>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport Feedback from \"./components/Feedback\";\n\nexport default function App() {\n  return <Feedback />;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}